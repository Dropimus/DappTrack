services:
  # ──────────────────── Database ────────────────────
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ──────────────────── Message Broker ───────────────
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"

  # ──────────────────── FastAPI Web ──────────────────
  web:
    build: .
    command: >
      /bin/bash -c "
      alembic upgrade head &&
      uvicorn server:app --host 0.0.0.0 --port 8000 --reload
      "
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    env_file:
      - .env

  # Celery Worker
  worker:
    build: .
    command: celery -A celery_app worker --loglevel=info
    volumes:
      - .:/app
    environment:
      DATABASE_URL: ${DATABASE_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on:
      - db
      - redis
    env_file:
      - .env

  # Celery Beat (Scheduler)
  beat:
    build: .
    command: celery -A celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    volumes:
      - .:/app
      - /tmp:/tmp
    environment:
      DATABASE_URL: ${DATABASE_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env

volumes:
  db_data:
