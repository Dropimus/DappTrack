services:
  # ──────────────────── Database ────────────────────
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - dapptrack_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
   

  # ──────────────────── Message Broker ───────────────
  redis:
    image: redis:7-alpine
    restart: always

  # ──────────────────── FastAPI Web ──────────────────
  web:
    build:
      context: ./server
      dockerfile: Dockerfile 
    command: >
      /bin/bash -c "
        echo '→ running Alembic…' &&
        alembic upgrade head &&
        echo '→ starting uvicorn…' &&
        uvicorn server:app --host 0.0.0.0 --port 8000 --reload
      "
    volumes:
      - airdrop_images:/app/static/airdrop_image
      - ./server:/app
    ports:
      - "8000:8000"
    env_file:
      - .env

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  
  # ─────────────────── Celery Worker ─────────────────
  worker:
    build:
      context: ./server
      dockerfile: Dockerfile
    command: celery -A workers.celery_app worker --loglevel=info
    volumes:
      - ./server:/app
    env_file:
      - .env
    depends_on:
      - db
      - redis

  # ──────────────── Celery Beat (Scheduler) ───────────
  beat:
    build:
      context: ./server
      dockerfile: Dockerfile
    command: celery -A workers.celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    volumes:
      - ./server:/app
      - /tmp:/tmp
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
  
  # ─────────────── API Gateway ───────────────
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - web


  # ─────────────── Nginx ───────────────
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./api_gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api_gateway
      - web
  

volumes:
  dapptrack_db_data:
  airdrop_images: